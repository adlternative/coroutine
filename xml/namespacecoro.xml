<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="namespacecoro" kind="namespace" language="C++">
    <compoundname>coro</compoundname>
    <innerclass refid="classcoro_1_1continue__on__apc" prot="public">coro::continue_on_apc</innerclass>
    <innerclass refid="classcoro_1_1continue__on__pthread" prot="public">coro::continue_on_pthread</innerclass>
    <innerclass refid="classcoro_1_1continue__on__thread__pool" prot="public">coro::continue_on_thread_pool</innerclass>
    <innerclass refid="classcoro_1_1enumerable" prot="public">coro::enumerable</innerclass>
    <innerclass refid="classcoro_1_1epoll__owner" prot="public">coro::epoll_owner</innerclass>
    <innerclass refid="classcoro_1_1event" prot="public">coro::event</innerclass>
    <innerclass refid="classcoro_1_1io__recv" prot="public">coro::io_recv</innerclass>
    <innerclass refid="classcoro_1_1io__recv__from" prot="public">coro::io_recv_from</innerclass>
    <innerclass refid="classcoro_1_1io__send" prot="public">coro::io_send</innerclass>
    <innerclass refid="classcoro_1_1io__send__to" prot="public">coro::io_send_to</innerclass>
    <innerclass refid="classcoro_1_1io__work__t" prot="public">coro::io_work_t</innerclass>
    <innerclass refid="classcoro_1_1kqueue__owner" prot="public">coro::kqueue_owner</innerclass>
    <innerclass refid="classcoro_1_1pthread__detacher" prot="public">coro::pthread_detacher</innerclass>
    <innerclass refid="classcoro_1_1pthread__joiner" prot="public">coro::pthread_joiner</innerclass>
    <innerclass refid="classcoro_1_1pthread__spawn__promise" prot="public">coro::pthread_spawn_promise</innerclass>
    <innerclass refid="classcoro_1_1section" prot="public">coro::section</innerclass>
    <innerclass refid="classcoro_1_1set__or__cancel" prot="public">coro::set_or_cancel</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__Network_1ga60d36260824423f894ffd077f8487663" prot="public" static="no">
        <type>gsl::span&lt; std::byte &gt;</type>
        <definition>using coro::io_buffer_t = typedef gsl::span&lt;std::byte&gt;</definition>
        <argsstring></argsstring>
        <name>io_buffer_t</name>
        <briefdescription>
<para>This is simply a view to storage. Be aware that it doesn&apos;t have ownership. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/net.h" line="69" column="1" bodyfile="interface/coroutine/net.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecoro_1a7d9e996f5b47200f011e2d8c84ee1147" prot="public" static="no">
        <type>void(*)(void *ctx, <ref refid="structstd_1_1coroutine__handle" kindref="compound">coroutine_handle</ref>&lt; void &gt; coro)</type>
        <definition>using coro::net_callback_t = typedef void (*)(void* ctx, coroutine_handle&lt;void&gt; coro)</definition>
        <argsstring></argsstring>
        <name>net_callback_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/net/io_darwin.cpp" line="17" column="1" bodyfile="modules/net/io_darwin.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacecoro_1a8c609d3792ba6a72e94e0f88aca23589" prot="public" static="no" mutable="no">
        <type><ref refid="classcoro_1_1kqueue__owner" kindref="compound">kqueue_owner</ref></type>
        <definition>kqueue_owner coro::netkq</definition>
        <argsstring></argsstring>
        <name>netkq</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/net/io_darwin.cpp" line="15" column="1" bodyfile="modules/net/io_darwin.cpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecoro_1a364142b18eb0724cabbf3a942c65ce92" prot="public" static="no" mutable="no">
        <type><ref refid="classcoro_1_1epoll__owner" kindref="compound">epoll_owner</ref></type>
        <definition>epoll_owner coro::iep</definition>
        <argsstring></argsstring>
        <name>iep</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/net/io_linux.cpp" line="15" column="1" bodyfile="modules/net/io_linux.cpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecoro_1a85afa8adbfd008d91e74fd5e0716e924" prot="public" static="no" mutable="no">
        <type><ref refid="classcoro_1_1epoll__owner" kindref="compound">epoll_owner</ref></type>
        <definition>epoll_owner coro::oep</definition>
        <argsstring></argsstring>
        <name>oep</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/net/io_linux.cpp" line="15" column="1" bodyfile="modules/net/io_linux.cpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecoro_1a75c5634f13d403665ca66b9e5df22caf" prot="public" static="no" mutable="no">
        <type>constexpr uint64_t</type>
        <definition>constexpr uint64_t coro::emask</definition>
        <argsstring></argsstring>
        <name>emask</name>
        <initializer>= 1ULL &lt;&lt; 63</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/system/linux.cpp" line="65" column="1" bodyfile="modules/system/linux.cpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__Linux_1gaefdd83117e8aadf1a4502ae9b2828b35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto coro::wait_in</definition>
        <argsstring>(epoll_owner &amp;ep, event &amp;efd)</argsstring>
        <name>wait_in</name>
        <param>
          <type><ref refid="classcoro_1_1epoll__owner" kindref="compound">epoll_owner</ref> &amp;</type>
          <declname>ep</declname>
        </param>
        <param>
          <type><ref refid="classcoro_1_1event" kindref="compound">event</ref> &amp;</type>
          <declname>efd</declname>
        </param>
        <briefdescription>
<para>Bind the given <computeroutput>event</computeroutput>(<computeroutput>eventfd</computeroutput>) to <computeroutput><ref refid="classcoro_1_1epoll__owner" kindref="compound">epoll_owner</ref></computeroutput>(Epoll) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ep</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcoro_1_1epoll__owner" kindref="compound">epoll_owner</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>efd</parametername>
</parameternamelist>
<parameterdescription>
<para>event </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classcoro_1_1event" kindref="compound">event</ref> </para></simplesect>
<simplesect kind="return"><para>awaitable struct for the binding </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>Prepares one-time registration</para><para>Wait for <computeroutput>write</computeroutput> to given <computeroutput>eventfd</computeroutput></para><para>Reset the given event object when resumed</para>        </inbodydescription>
        <location file="interface/coroutine/linux.h" line="152" column="1" bodyfile="interface/coroutine/linux.h" bodystart="152" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="group__Network_1ga31d5a4a545024c3c24e6f5204537307b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto coro::send_to</definition>
        <argsstring>(uint64_t sd, const sockaddr_in &amp;remote, io_buffer_t buf, io_work_t &amp;work) noexcept(false) -&gt; io_send_to &amp;</argsstring>
        <name>send_to</name>
        <param>
          <type>uint64_t</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>const sockaddr_in &amp;</type>
          <declname>remote</declname>
        </param>
        <param>
          <type><ref refid="group__Network_1ga60d36260824423f894ffd077f8487663" kindref="member">io_buffer_t</ref></type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="classcoro_1_1io__work__t" kindref="compound">io_work_t</ref> &amp;</type>
          <declname>work</declname>
        </param>
        <briefdescription>
<para>Constructs <computeroutput><ref refid="classcoro_1_1io__send__to" kindref="compound">io_send_to</ref></computeroutput> awaitable with the given parameters. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>remote</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>work</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classcoro_1_1io__send__to" kindref="compound">io_send_to</ref>&amp; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/net.h" line="251" column="1" bodyfile="modules/net/io_darwin.cpp" bodystart="62" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="group__Network_1gae85ec53584de7c5275cf85e7913316eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto coro::send_to</definition>
        <argsstring>(uint64_t sd, const sockaddr_in6 &amp;remote, io_buffer_t buf, io_work_t &amp;work) noexcept(false) -&gt; io_send_to &amp;</argsstring>
        <name>send_to</name>
        <param>
          <type>uint64_t</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>const sockaddr_in6 &amp;</type>
          <declname>remote</declname>
        </param>
        <param>
          <type><ref refid="group__Network_1ga60d36260824423f894ffd077f8487663" kindref="member">io_buffer_t</ref></type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="classcoro_1_1io__work__t" kindref="compound">io_work_t</ref> &amp;</type>
          <declname>work</declname>
        </param>
        <briefdescription>
<para>Constructs <computeroutput><ref refid="classcoro_1_1io__send__to" kindref="compound">io_send_to</ref></computeroutput> awaitable with the given parameters. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>remote</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>work</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classcoro_1_1io__send__to" kindref="compound">io_send_to</ref>&amp; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/net.h" line="263" column="1" bodyfile="modules/net/io_darwin.cpp" bodystart="71" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="group__Network_1gace516cdc1f8b51596ba7a406190182eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto coro::recv_from</definition>
        <argsstring>(uint64_t sd, sockaddr_in &amp;remote, io_buffer_t buf, io_work_t &amp;work) noexcept(false) -&gt; io_recv_from &amp;</argsstring>
        <name>recv_from</name>
        <param>
          <type>uint64_t</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>sockaddr_in &amp;</type>
          <declname>remote</declname>
        </param>
        <param>
          <type><ref refid="group__Network_1ga60d36260824423f894ffd077f8487663" kindref="member">io_buffer_t</ref></type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="classcoro_1_1io__work__t" kindref="compound">io_work_t</ref> &amp;</type>
          <declname>work</declname>
        </param>
        <briefdescription>
<para>Constructs <computeroutput><ref refid="classcoro_1_1io__recv__from" kindref="compound">io_recv_from</ref></computeroutput> awaitable with the given parameters. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>remote</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>work</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classcoro_1_1io__recv__from" kindref="compound">io_recv_from</ref>&amp; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/net.h" line="275" column="1" bodyfile="modules/net/io_darwin.cpp" bodystart="107" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="group__Network_1ga1e1a2ad32443f868826212a73ce0027e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto coro::recv_from</definition>
        <argsstring>(uint64_t sd, sockaddr_in6 &amp;remote, io_buffer_t buf, io_work_t &amp;work) noexcept(false) -&gt; io_recv_from &amp;</argsstring>
        <name>recv_from</name>
        <param>
          <type>uint64_t</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>sockaddr_in6 &amp;</type>
          <declname>remote</declname>
        </param>
        <param>
          <type><ref refid="group__Network_1ga60d36260824423f894ffd077f8487663" kindref="member">io_buffer_t</ref></type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="classcoro_1_1io__work__t" kindref="compound">io_work_t</ref> &amp;</type>
          <declname>work</declname>
        </param>
        <briefdescription>
<para>Constructs <computeroutput><ref refid="classcoro_1_1io__recv__from" kindref="compound">io_recv_from</ref></computeroutput> awaitable with the given parameters. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>remote</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>work</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classcoro_1_1io__recv__from" kindref="compound">io_recv_from</ref>&amp; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/net.h" line="287" column="1" bodyfile="modules/net/io_darwin.cpp" bodystart="115" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="group__Network_1gac94bb59884293c451906c8cffe825a14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto coro::send_stream</definition>
        <argsstring>(uint64_t sd, io_buffer_t buf, uint32_t flag, io_work_t &amp;work) noexcept(false) -&gt; io_send &amp;</argsstring>
        <name>send_stream</name>
        <param>
          <type>uint64_t</type>
          <declname>sd</declname>
        </param>
        <param>
          <type><ref refid="group__Network_1ga60d36260824423f894ffd077f8487663" kindref="member">io_buffer_t</ref></type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="classcoro_1_1io__work__t" kindref="compound">io_work_t</ref> &amp;</type>
          <declname>work</declname>
        </param>
        <briefdescription>
<para>Constructs <computeroutput><ref refid="classcoro_1_1io__send" kindref="compound">io_send</ref></computeroutput> awaitable with the given parameters. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flag</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>work</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classcoro_1_1io__send" kindref="compound">io_send</ref>&amp; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/net.h" line="299" column="1" bodyfile="modules/net/io_darwin.cpp" bodystart="155" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="group__Network_1ga60c53387a2e976df4742620055666796" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto coro::recv_stream</definition>
        <argsstring>(uint64_t sd, io_buffer_t buf, uint32_t flag, io_work_t &amp;work) noexcept(false) -&gt; io_recv &amp;</argsstring>
        <name>recv_stream</name>
        <param>
          <type>uint64_t</type>
          <declname>sd</declname>
        </param>
        <param>
          <type><ref refid="group__Network_1ga60d36260824423f894ffd077f8487663" kindref="member">io_buffer_t</ref></type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="classcoro_1_1io__work__t" kindref="compound">io_work_t</ref> &amp;</type>
          <declname>work</declname>
        </param>
        <briefdescription>
<para>Constructs <computeroutput><ref refid="classcoro_1_1io__recv" kindref="compound">io_recv</ref></computeroutput> awaitable with the given parameters. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flag</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>work</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classcoro_1_1io__recv" kindref="compound">io_recv</ref>&amp; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/net.h" line="311" column="1" bodyfile="modules/net/io_darwin.cpp" bodystart="189" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="group__Network_1ga022830c9178aa1a201f95abd2026d35f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void coro::poll_net_tasks</definition>
        <argsstring>(uint64_t nano) noexcept(false)</argsstring>
        <name>poll_net_tasks</name>
        <param>
          <type>uint64_t</type>
          <declname>nano</declname>
        </param>
        <briefdescription>
<para>Poll internal I/O works and invoke user callback. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nano</parametername>
</parameternamelist>
<parameterdescription>
<para>timeout in nanoseconds </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/net.h" line="319" column="1" bodyfile="modules/net/io_darwin.cpp" bodystart="36" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="group__Network_1gadc07999d236df3e984d42b37cbf56693" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t coro::get_address</definition>
        <argsstring>(const addrinfo &amp;hint, gsl::czstring&lt;&gt; host, gsl::czstring&lt;&gt; serv, gsl::span&lt; sockaddr_in &gt; output) noexcept</argsstring>
        <name>get_address</name>
        <param>
          <type>const addrinfo &amp;</type>
          <declname>hint</declname>
        </param>
        <param>
          <type>gsl::czstring&lt;&gt;</type>
          <declname>host</declname>
        </param>
        <param>
          <type>gsl::czstring&lt;&gt;</type>
          <declname>serv</declname>
        </param>
        <param>
          <type>gsl::span&lt; sockaddr_in &gt;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Thin wrapper of <computeroutput>getaddrinfo</computeroutput> for IPv4. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hint</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>host</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>serv</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t Error code from the <computeroutput>getaddrinfo</computeroutput> that can be the argument of <computeroutput>gai_strerror</computeroutput> </para></simplesect>
<simplesect kind="see"><para>getaddrinfo </para></simplesect>
<simplesect kind="see"><para>gai_strerror </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/net.h" line="332" column="1" bodyfile="modules/net/resolver.cpp" bodystart="60" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="group__Network_1ga96f3a62a26f3aadf686d1ab88ab6fcc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t coro::get_address</definition>
        <argsstring>(const addrinfo &amp;hint, gsl::czstring&lt;&gt; host, gsl::czstring&lt;&gt; serv, gsl::span&lt; sockaddr_in6 &gt; output) noexcept</argsstring>
        <name>get_address</name>
        <param>
          <type>const addrinfo &amp;</type>
          <declname>hint</declname>
        </param>
        <param>
          <type>gsl::czstring&lt;&gt;</type>
          <declname>host</declname>
        </param>
        <param>
          <type>gsl::czstring&lt;&gt;</type>
          <declname>serv</declname>
        </param>
        <param>
          <type>gsl::span&lt; sockaddr_in6 &gt;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Thin wrapper of <computeroutput>getaddrinfo</computeroutput> for IPv6. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hint</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>host</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>serv</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t Error code from the <computeroutput>getaddrinfo</computeroutput> that can be the argument of <computeroutput>gai_strerror</computeroutput> </para></simplesect>
<simplesect kind="see"><para>getaddrinfo </para></simplesect>
<simplesect kind="see"><para>gai_strerror </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/net.h" line="347" column="1" bodyfile="modules/net/resolver.cpp" bodystart="76" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="group__Network_1ga1da2a71cf037b5ed7f88c1451fc9e18d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t coro::get_name</definition>
        <argsstring>(const sockaddr_in &amp;addr, gsl::zstring&lt; NI_MAXHOST &gt; name, gsl::zstring&lt; NI_MAXSERV &gt; serv, int32_t flags=NI_NUMERICHOST|NI_NUMERICSERV) noexcept</argsstring>
        <name>get_name</name>
        <param>
          <type>const sockaddr_in &amp;</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>gsl::zstring&lt; NI_MAXHOST &gt;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>gsl::zstring&lt; NI_MAXSERV &gt;</type>
          <declname>serv</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>flags</declname>
          <defval>NI_NUMERICHOST|NI_NUMERICSERV</defval>
        </param>
        <briefdescription>
<para>Thin wrapper of <computeroutput>getnameinfo</computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>serv</parametername>
</parameternamelist>
<parameterdescription>
<para>can be <computeroutput>nullptr</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t EAI_AGAIN ... </para></simplesect>
<simplesect kind="see"><para>getnameinfo </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/net.h" line="361" column="1" bodyfile="modules/net/resolver.cpp" bodystart="11" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="group__Network_1gad86a7780601bd58197a45bade7c3cacf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t coro::get_name</definition>
        <argsstring>(const sockaddr_in6 &amp;addr, gsl::zstring&lt; NI_MAXHOST &gt; name, gsl::zstring&lt; NI_MAXSERV &gt; serv, int32_t flags=NI_NUMERICHOST|NI_NUMERICSERV) noexcept</argsstring>
        <name>get_name</name>
        <param>
          <type>const sockaddr_in6 &amp;</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>gsl::zstring&lt; NI_MAXHOST &gt;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>gsl::zstring&lt; NI_MAXSERV &gt;</type>
          <declname>serv</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>flags</declname>
          <defval>NI_NUMERICHOST|NI_NUMERICSERV</defval>
        </param>
        <briefdescription>
<para>Thin wrapper of <computeroutput>getnameinfo</computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>serv</parametername>
</parameternamelist>
<parameterdescription>
<para>can be <computeroutput>nullptr</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t EAI_AGAIN ... </para></simplesect>
<simplesect kind="see"><para>getnameinfo </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/net.h" line="375" column="1" bodyfile="modules/net/resolver.cpp" bodystart="22" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="namespacecoro_1ae4fd0bdc063dde2d17debd6289680367" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void coro::poll_net_tasks</definition>
        <argsstring>(const timespec &amp;wait_time, net_callback_t callback, void *ctx) noexcept(false)</argsstring>
        <name>poll_net_tasks</name>
        <param>
          <type>const timespec &amp;</type>
          <declname>wait_time</declname>
        </param>
        <param>
          <type><ref refid="namespacecoro_1a7d9e996f5b47200f011e2d8c84ee1147" kindref="member">net_callback_t</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/net/io_darwin.cpp" line="19" column="1" bodyfile="modules/net/io_darwin.cpp" bodystart="19" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="namespacecoro_1a0260f9ba0f9c3c2abe90513e1f9ebbb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void coro::resume_net_task</definition>
        <argsstring>(void *, coroutine_handle&lt; void &gt; coro) noexcept(false)</argsstring>
        <name>resume_net_task</name>
        <param>
          <type>void *</type>
        </param>
        <param>
          <type><ref refid="structstd_1_1coroutine__handle" kindref="compound">coroutine_handle</ref>&lt; void &gt;</type>
          <declname>coro</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/net/io_darwin.cpp" line="32" column="1" bodyfile="modules/net/io_darwin.cpp" bodystart="32" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="namespacecoro_1a556b102db93c6e7cf8864b28308036e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool coro::is_async_pending</definition>
        <argsstring>(int ec) noexcept</argsstring>
        <name>is_async_pending</name>
        <param>
          <type>int</type>
          <declname>ec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/net/io_windows.cpp" line="19" column="1" bodyfile="modules/net/io_windows.cpp" bodystart="19" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="namespacecoro_1affafc280af2137eafd6000149dc01334" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void CALLBACK</type>
        <definition>void CALLBACK coro::on_io_done</definition>
        <argsstring>(DWORD errc, DWORD sz, LPWSAOVERLAPPED pover, DWORD flags) noexcept</argsstring>
        <name>on_io_done</name>
        <param>
          <type>DWORD</type>
          <declname>errc</declname>
        </param>
        <param>
          <type>DWORD</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>LPWSAOVERLAPPED</type>
          <declname>pover</declname>
        </param>
        <param>
          <type>DWORD</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/net/io_windows.cpp" line="33" column="1" bodyfile="modules/net/io_windows.cpp" bodystart="33" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespacecoro_1aaa874db68805b8dd64c59b7727648a17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t coro::get_io_error</definition>
        <argsstring>(const OVERLAPPED *target) noexcept</argsstring>
        <name>get_io_error</name>
        <param>
          <type>const OVERLAPPED *</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/net/io_windows.cpp" line="51" column="1" bodyfile="modules/net/io_windows.cpp" bodystart="51" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespacecoro_1afdc260d04de2933c90bdc26d9bd09768" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t coro::get_io_length</definition>
        <argsstring>(const OVERLAPPED *target) noexcept</argsstring>
        <name>get_io_length</name>
        <param>
          <type>const OVERLAPPED *</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/net/io_windows.cpp" line="55" column="1" bodyfile="modules/net/io_windows.cpp" bodystart="55" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespacecoro_1afc690d3107e22a73fe91d15c30d52d58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto coro::zero_overlapped</definition>
        <argsstring>(io_control_block *work) noexcept-&gt; io_control_block *</argsstring>
        <name>zero_overlapped</name>
        <param>
          <type>io_control_block *</type>
          <declname>work</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/net/io_windows.cpp" line="65" column="1" bodyfile="modules/net/io_windows.cpp" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespacecoro_1aeebb761b70e474419a62f56419402531" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>coro::GSL_SUPPRESS</definition>
        <argsstring>(f.4) auto make_wsa_buf(io_buffer_t v) noexcept-&gt; WSABUF</argsstring>
        <name>GSL_SUPPRESS</name>
        <param>
          <type>f.</type>
          <declname>4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/net/io_windows.cpp" line="71" column="1" bodyfile="modules/net/io_windows.cpp" bodystart="71" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespacecoro_1a6b125cc7a08921bd28b759c52a5889b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto coro::get_address</definition>
        <argsstring>(addrinfo *list) noexcept-&gt; enumerable&lt; sockaddr * &gt;</argsstring>
        <name>get_address</name>
        <param>
          <type>addrinfo *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/net/resolver.cpp" line="32" column="1" bodyfile="modules/net/resolver.cpp" bodystart="32" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespacecoro_1a9f15e22ff13bed5b17201e7a014d9ea9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto coro::get_address</definition>
        <argsstring>(addrinfo *list, sockaddr_in addr) noexcept-&gt; enumerable&lt; sockaddr_in &gt;</argsstring>
        <name>get_address</name>
        <param>
          <type>addrinfo *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>sockaddr_in</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/net/resolver.cpp" line="42" column="1" bodyfile="modules/net/resolver.cpp" bodystart="42" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="namespacecoro_1ae7c90a14ac066a5fb7a13aed2945091a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto coro::get_address</definition>
        <argsstring>(addrinfo *list, sockaddr_in6 addr) noexcept-&gt; enumerable&lt; sockaddr_in6 &gt;</argsstring>
        <name>get_address</name>
        <param>
          <type>addrinfo *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>sockaddr_in6</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/net/resolver.cpp" line="51" column="1" bodyfile="modules/net/resolver.cpp" bodystart="51" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="namespacecoro_1a0a4a5a45cda53ed181fbff64a604c50a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool coro::is_signaled</definition>
        <argsstring>(uint64_t state) noexcept</argsstring>
        <name>is_signaled</name>
        <param>
          <type>uint64_t</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/system/linux.cpp" line="70" column="1" bodyfile="modules/system/linux.cpp" bodystart="70" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespacecoro_1a8d123c193bac1913ca11cad209b6d864" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t coro::get_eventfd</definition>
        <argsstring>(uint64_t state) noexcept</argsstring>
        <name>get_eventfd</name>
        <param>
          <type>uint64_t</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/system/linux.cpp" line="74" column="1" bodyfile="modules/system/linux.cpp" bodystart="74" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespacecoro_1a757aac3d45727d3745a96138ddf5a8c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void coro::notify_event</definition>
        <argsstring>(int64_t efd) noexcept(false)</argsstring>
        <name>notify_event</name>
        <param>
          <type>int64_t</type>
          <declname>efd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/system/linux.cpp" line="78" column="1" bodyfile="modules/system/linux.cpp" bodystart="78" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="namespacecoro_1a93e9b38a4a7badcb102632a09861318d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void coro::consume_event</definition>
        <argsstring>(int64_t efd) noexcept(false)</argsstring>
        <name>consume_event</name>
        <param>
          <type>int64_t</type>
          <declname>efd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/system/linux.cpp" line="87" column="1" bodyfile="modules/system/linux.cpp" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="namespacecoro_1ad9c56049f2089b9473d8ac9bc06e2a6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void __stdcall</type>
        <definition>void __stdcall coro::wait_event_on_thread_pool</definition>
        <argsstring>(PVOID ctx, BOOLEAN timedout)</argsstring>
        <name>wait_event_on_thread_pool</name>
        <param>
          <type>PVOID</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>BOOLEAN</type>
          <declname>timedout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/system/windows.cpp" line="31" column="1" bodyfile="modules/system/windows.cpp" bodystart="31" bodyend="36"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>github.com/luncliff (<ulink url="mailto:luncliff@gmail.com">luncliff@gmail.com</ulink>) </para></simplesect>
</para>    </detaileddescription>
    <location file="interface/coroutine/linux.h" line="20" column="1"/>
  </compounddef>
</doxygen>
