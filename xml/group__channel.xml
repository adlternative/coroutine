<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="group__channel" kind="group">
    <compoundname>channel</compoundname>
    <title>Channel</title>
    <innerclass refid="classchannel__reader" prot="public">channel_reader</innerclass>
    <innerclass refid="classchannel__writer" prot="public">channel_writer</innerclass>
    <innerclass refid="classchannel" prot="public">channel</innerclass>
    <innerclass refid="classchannel__peeker" prot="public">channel_peeker</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__channel_1ga4fbcdbf9072d326f515ae5c36c6bef14" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void* internal::poison</definition>
        <argsstring>() noexcept(false)</argsstring>
        <name>poison</name>
        <briefdescription>
<para>Returns a non-null address that leads access violation. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Notice that <computeroutput>reinterpret_cast</computeroutput> is not constexpr for some compiler. </para></simplesect>
<simplesect kind="return"><para>void* non-null address </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/channel.hpp" line="75" column="1" bodyfile="interface/coroutine/channel.hpp" bodystart="75" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="group__channel_1ga3f5b0341c261df210578215eccb3111a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename M</type>
          </param>
          <param>
            <type>typename Fn</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void select</definition>
        <argsstring>(channel&lt; T, M &gt; &amp;ch, Fn &amp;&amp;fn) noexcept(false)</argsstring>
        <name>select</name>
        <param>
          <type><ref refid="classchannel" kindref="compound">channel</ref>&lt; T, M &gt; &amp;</type>
          <declname>ch</declname>
        </param>
        <param>
          <type>Fn &amp;&amp;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If the channel is readable, acquire the value and invoke the function</para></simplesect>
<simplesect kind="see"><para><ref refid="classchannel__peeker" kindref="compound">channel_peeker</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/channel.hpp" line="527" column="1" bodyfile="interface/coroutine/channel.hpp" bodystart="527" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="group__channel_1ga7c401c70f1afabefe85be0e1bc33d94c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>typename Ch</type>
          </param>
          <param>
            <type>typename Fn</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void select</definition>
        <argsstring>(Ch &amp;ch, Fn &amp;&amp;fn, Args &amp;&amp;...args) noexcept(false)</argsstring>
        <name>select</name>
        <param>
          <type>Ch &amp;</type>
          <declname>ch</declname>
        </param>
        <param>
          <type>Fn &amp;&amp;</type>
          <declname>fn</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>For each pair, peeks a channel and invoke the function with the value if the peek was successful.</para></simplesect>
<simplesect kind="see"><para>test/channel_select_type.cpp </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/channel.hpp" line="543" column="1" bodyfile="interface/coroutine/channel.hpp" bodystart="543" bodyend="547"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>The implementation of channel heavily rely on <computeroutput>friend</computeroutput> relationship. The design may make the template code ugly, but is necessary because of 2 behaviors.</para></simplesect>
<itemizedlist>
<listitem><para><computeroutput>channel</computeroutput> is a synchronizes 2 awaitable types, <computeroutput><ref refid="classchannel__reader" kindref="compound">channel_reader</ref></computeroutput> and <computeroutput><ref refid="classchannel__writer" kindref="compound">channel_writer</ref></computeroutput>.</para></listitem><listitem><para>Those reader/writer exchanges their information before their <computeroutput>resume</computeroutput> of each other.</para></listitem></itemizedlist>
</para><para>If user code can become mess because of such relationship, it is strongly recommended to hide <computeroutput>channel</computeroutput> internally and open their own interfaces. </para>    </detaileddescription>
  </compounddef>
</doxygen>
