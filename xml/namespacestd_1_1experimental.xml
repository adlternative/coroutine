<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="namespacestd_1_1experimental" kind="namespace" language="C++">
    <compoundname>std::experimental</compoundname>
    <innerclass refid="classstd_1_1experimental_1_1coroutine__handle" prot="public">std::experimental::coroutine_handle</innerclass>
    <innerclass refid="classstd_1_1experimental_1_1coroutine__handle_3_01noop__coroutine__promise_01_4" prot="public">std::experimental::coroutine_handle&lt; noop_coroutine_promise &gt;</innerclass>
    <innerclass refid="classstd_1_1experimental_1_1coroutine__handle_3_01void_01_4" prot="public">std::experimental::coroutine_handle&lt; void &gt;</innerclass>
    <innerclass refid="structstd_1_1experimental_1_1coroutine__traits" prot="public">std::experimental::coroutine_traits</innerclass>
    <innerclass refid="structstd_1_1experimental_1_1coroutine__traits_3_01void_00_01P_8_8_8_01_4" prot="public">std::experimental::coroutine_traits&lt; void, P... &gt;</innerclass>
    <innerclass refid="structstd_1_1experimental_1_1noop__coroutine__promise" prot="public">std::experimental::noop_coroutine_promise</innerclass>
    <innerclass refid="classstd_1_1experimental_1_1suspend__always" prot="public">std::experimental::suspend_always</innerclass>
    <innerclass refid="classstd_1_1experimental_1_1suspend__never" prot="public">std::experimental::suspend_never</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacestd_1_1experimental_1a332c317fca5dac180c997a4f8410ac75" prot="public" static="no">
        <type><ref refid="classstd_1_1experimental_1_1coroutine__handle" kindref="compound">coroutine_handle</ref>&lt; <ref refid="structstd_1_1experimental_1_1noop__coroutine__promise" kindref="compound">noop_coroutine_promise</ref> &gt;</type>
        <definition>using std::experimental::noop_coroutine_handle = typedef coroutine_handle&lt;noop_coroutine_promise&gt;</definition>
        <argsstring></argsstring>
        <name>noop_coroutine_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/frame.h" line="349" column="1" bodyfile="interface/coroutine/frame.h" bodystart="349" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacestd_1_1experimental_1af678c6b41c5d772b10ebb87546b5ad4b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool std::experimental::operator==</definition>
        <argsstring>(const coroutine_handle&lt; void &gt; lhs, const coroutine_handle&lt; void &gt; rhs) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classstd_1_1experimental_1_1coroutine__handle" kindref="compound">coroutine_handle</ref>&lt; void &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classstd_1_1experimental_1_1coroutine__handle" kindref="compound">coroutine_handle</ref>&lt; void &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/frame.h" line="323" column="1" bodyfile="interface/coroutine/frame.h" bodystart="323" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="namespacestd_1_1experimental_1ae298174d1290f8634172802b05fe8557" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool std::experimental::operator!=</definition>
        <argsstring>(const coroutine_handle&lt; void &gt; lhs, const coroutine_handle&lt; void &gt; rhs) noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classstd_1_1experimental_1_1coroutine__handle" kindref="compound">coroutine_handle</ref>&lt; void &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classstd_1_1experimental_1_1coroutine__handle" kindref="compound">coroutine_handle</ref>&lt; void &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/frame.h" line="327" column="1" bodyfile="interface/coroutine/frame.h" bodystart="327" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="namespacestd_1_1experimental_1ac2f9247ca4d893b694562afd12c9ace1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool std::experimental::operator&lt;</definition>
        <argsstring>(const coroutine_handle&lt; void &gt; lhs, const coroutine_handle&lt; void &gt; rhs) noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classstd_1_1experimental_1_1coroutine__handle" kindref="compound">coroutine_handle</ref>&lt; void &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classstd_1_1experimental_1_1coroutine__handle" kindref="compound">coroutine_handle</ref>&lt; void &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/frame.h" line="331" column="1" bodyfile="interface/coroutine/frame.h" bodystart="331" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="namespacestd_1_1experimental_1a4c559297e30ec354ed1d38670efa7a9d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool std::experimental::operator&gt;</definition>
        <argsstring>(const coroutine_handle&lt; void &gt; lhs, const coroutine_handle&lt; void &gt; rhs) noexcept</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classstd_1_1experimental_1_1coroutine__handle" kindref="compound">coroutine_handle</ref>&lt; void &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classstd_1_1experimental_1_1coroutine__handle" kindref="compound">coroutine_handle</ref>&lt; void &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/frame.h" line="335" column="1" bodyfile="interface/coroutine/frame.h" bodystart="335" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="namespacestd_1_1experimental_1a6d55bc3fb1700c4f6ed95c24ba7e91bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool std::experimental::operator&lt;=</definition>
        <argsstring>(const coroutine_handle&lt; void &gt; lhs, const coroutine_handle&lt; void &gt; rhs) noexcept</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classstd_1_1experimental_1_1coroutine__handle" kindref="compound">coroutine_handle</ref>&lt; void &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classstd_1_1experimental_1_1coroutine__handle" kindref="compound">coroutine_handle</ref>&lt; void &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/frame.h" line="339" column="1" bodyfile="interface/coroutine/frame.h" bodystart="339" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="namespacestd_1_1experimental_1a279287d45bcdbc54be630cefcc73d854" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool std::experimental::operator&gt;=</definition>
        <argsstring>(const coroutine_handle&lt; void &gt; lhs, const coroutine_handle&lt; void &gt; rhs) noexcept</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classstd_1_1experimental_1_1coroutine__handle" kindref="compound">coroutine_handle</ref>&lt; void &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classstd_1_1experimental_1_1coroutine__handle" kindref="compound">coroutine_handle</ref>&lt; void &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/frame.h" line="343" column="1" bodyfile="interface/coroutine/frame.h" bodystart="343" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="namespacestd_1_1experimental_1a6fb7945da7b9ad20181e92a97e44ae7f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacestd_1_1experimental_1a332c317fca5dac180c997a4f8410ac75" kindref="member">noop_coroutine_handle</ref></type>
        <definition>noop_coroutine_handle std::experimental::noop_coroutine</definition>
        <argsstring>() noexcept</argsstring>
        <name>noop_coroutine</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/frame.h" line="395" column="1" bodyfile="interface/coroutine/frame.h" bodystart="395" bodyend="397"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="interface/coroutine/frame.h" line="156" column="1"/>
  </compounddef>
</doxygen>
