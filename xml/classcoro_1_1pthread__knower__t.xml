<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classcoro_1_1pthread__knower__t" kind="class" language="C++" prot="public">
    <compoundname>coro::pthread_knower_t</compoundname>
    <derivedcompoundref refid="classcoro_1_1pthread__detacher__t" prot="public" virt="non-virtual">coro::pthread_detacher_t</derivedcompoundref>
    <derivedcompoundref refid="classcoro_1_1pthread__joiner__t" prot="public" virt="non-virtual">coro::pthread_joiner_t</derivedcompoundref>
    <includes refid="pthread_8h" local="no">pthread.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classcoro_1_1pthread__knower__t_1a9bdae50f877e7c639c28507f28eb1492" prot="protected" static="no" mutable="no">
        <type><ref refid="classcoro_1_1pthread__spawn__promise" kindref="compound">pthread_spawn_promise</ref> *</type>
        <definition>pthread_spawn_promise* coro::pthread_knower_t::promise</definition>
        <argsstring></argsstring>
        <name>promise</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/pthread.h" line="126" column="1" bodyfile="interface/coroutine/pthread.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classcoro_1_1pthread__knower__t_1aaba88045030e8d395299c27a24b99ba2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>coro::pthread_knower_t::operator pthread_t</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator pthread_t</name>
        <briefdescription>
<para>allow access to the <computeroutput>tid</computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>pthread_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/pthread.h" line="116" column="1" bodyfile="interface/coroutine/pthread.h" bodystart="116" bodyend="118"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classcoro_1_1pthread__knower__t_1a02ec12b031636ecd0eba2c8ebf99614a" prot="protected" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>coro::pthread_knower_t::pthread_knower_t</definition>
        <argsstring>(pthread_spawn_promise *_promise) noexcept</argsstring>
        <name>pthread_knower_t</name>
        <param>
          <type><ref refid="classcoro_1_1pthread__spawn__promise" kindref="compound">pthread_spawn_promise</ref> *</type>
          <declname>_promise</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/pthread.h" line="121" column="1" bodyfile="interface/coroutine/pthread.h" bodystart="121" bodyend="123"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A proxy to <computeroutput><ref refid="classcoro_1_1pthread__spawn__promise" kindref="compound">pthread_spawn_promise</ref></computeroutput></para><para>The type must ensure the promise contains a valid <computeroutput>pthread_t</computeroutput> when it is constructed. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="300">
        <label>coro::pthread_knower_t</label>
        <link refid="classcoro_1_1pthread__knower__t"/>
      </node>
      <node id="302">
        <label>coro::pthread_joiner_t</label>
        <link refid="classcoro_1_1pthread__joiner__t"/>
        <childnode refid="300" relation="public-inheritance">
        </childnode>
      </node>
      <node id="301">
        <label>coro::pthread_detacher_t</label>
        <link refid="classcoro_1_1pthread__detacher__t"/>
        <childnode refid="300" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="304">
        <label>coro::pthread_spawn_promise</label>
        <link refid="classcoro_1_1pthread__spawn__promise"/>
      </node>
      <node id="303">
        <label>coro::pthread_knower_t</label>
        <link refid="classcoro_1_1pthread__knower__t"/>
        <childnode refid="304" relation="usage">
          <edgelabel>promise</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="interface/coroutine/pthread.h" line="110" column="1" bodyfile="interface/coroutine/pthread.h" bodystart="110" bodyend="127"/>
    <listofallmembers>
      <member refid="classcoro_1_1pthread__knower__t_1aaba88045030e8d395299c27a24b99ba2" prot="public" virt="non-virtual"><scope>coro::pthread_knower_t</scope><name>operator pthread_t</name></member>
      <member refid="classcoro_1_1pthread__knower__t_1a9bdae50f877e7c639c28507f28eb1492" prot="protected" virt="non-virtual"><scope>coro::pthread_knower_t</scope><name>promise</name></member>
      <member refid="classcoro_1_1pthread__knower__t_1a02ec12b031636ecd0eba2c8ebf99614a" prot="protected" virt="non-virtual"><scope>coro::pthread_knower_t</scope><name>pthread_knower_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
