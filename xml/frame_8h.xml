<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="frame_8h" kind="file" language="C++">
    <compoundname>frame.h</compoundname>
    <includes local="no">cstddef</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">exception</includes>
    <includes local="no">functional</includes>
    <includedby refid="frame_8cpp" local="yes">modules/portable/frame.cpp</includedby>
    <includedby refid="darwin_8cpp" local="no">modules/system/darwin.cpp</includedby>
    <incdepgraph>
      <node id="180">
        <label>functional</label>
      </node>
      <node id="175">
        <label>interface/coroutine/frame.h</label>
        <link refid="frame.h"/>
        <childnode refid="176" relation="include">
        </childnode>
        <childnode refid="177" relation="include">
        </childnode>
        <childnode refid="178" relation="include">
        </childnode>
        <childnode refid="179" relation="include">
        </childnode>
        <childnode refid="180" relation="include">
        </childnode>
      </node>
      <node id="177">
        <label>cstdint</label>
      </node>
      <node id="179">
        <label>exception</label>
      </node>
      <node id="176">
        <label>cstddef</label>
      </node>
      <node id="178">
        <label>type_traits</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="181">
        <label>interface/coroutine/frame.h</label>
        <link refid="frame.h"/>
        <childnode refid="182" relation="include">
        </childnode>
        <childnode refid="183" relation="include">
        </childnode>
      </node>
      <node id="183">
        <label>modules/system/darwin.cpp</label>
        <link refid="darwin_8cpp"/>
      </node>
      <node id="182">
        <label>modules/portable/frame.cpp</label>
        <link refid="frame_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structstd_1_1coroutine__handle" prot="public">std::coroutine_handle</innerclass>
    <innerclass refid="structstd_1_1coroutine__handle_3_01void_01_4" prot="public">std::coroutine_handle&lt; void &gt;</innerclass>
    <innerclass refid="structstd_1_1coroutine__handle" prot="public">std::coroutine_handle</innerclass>
    <innerclass refid="structstd_1_1noop__coroutine__promise" prot="public">std::noop_coroutine_promise</innerclass>
    <innerclass refid="structstd_1_1coroutine__handle_3_01noop__coroutine__promise_01_4" prot="public">std::coroutine_handle&lt; noop_coroutine_promise &gt;</innerclass>
    <innerclass refid="classstd_1_1suspend__never" prot="public">std::suspend_never</innerclass>
    <innerclass refid="classstd_1_1suspend__always" prot="public">std::suspend_always</innerclass>
    <innerclass refid="structstd_1_1coro__traits__sfinae" prot="public">std::coro_traits_sfinae</innerclass>
    <innerclass refid="structstd_1_1coro__traits__sfinae_3_01__Ret_00_01void__t_3_01typename_01__Ret_1_1promise__type_01_4_01_4" prot="public">std::coro_traits_sfinae&lt; _Ret, void_t&lt; typename _Ret::promise_type &gt; &gt;</innerclass>
    <innerclass refid="structstd_1_1experimental_1_1coroutine__traits" prot="public">std::experimental::coroutine_traits</innerclass>
    <innerclass refid="structstd_1_1hash_3_01coroutine__handle_3_01P_01_4_01_4" prot="public">std::hash&lt; coroutine_handle&lt; P &gt; &gt;</innerclass>
    <innernamespace refid="namespacestd">std</innernamespace>
    <innernamespace refid="namespacestd_1_1experimental">std::experimental</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="frame_8h_1a5ecce067256439ed3b5681e094ae749c" prot="public" static="no">
        <name>_COROUTINE_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/frame.h" line="15" column="9" bodyfile="interface/coroutine/frame.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="frame_8h_1a3096b918a14bbd178dd4899876bba567" prot="public" static="no">
        <name>_EXPERIMENTAL_RESUMABLE_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/frame.h" line="16" column="9" bodyfile="interface/coroutine/frame.h" bodystart="16" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="frame_8h_1ac002a62257f981a6fc711d37427b78ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool portable_coro_done</definition>
        <argsstring>(portable_coro_prefix *_Handle)</argsstring>
        <name>portable_coro_done</name>
        <param>
          <type>portable_coro_prefix *</type>
          <declname>_Handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/frame.h" line="41" column="1" bodyfile="modules/portable/frame.cpp" bodystart="122" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="frame_8h_1a9e5d5a4fb051d725d1b9dd68151ec9fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void portable_coro_resume</definition>
        <argsstring>(portable_coro_prefix *_Handle)</argsstring>
        <name>portable_coro_resume</name>
        <param>
          <type>portable_coro_prefix *</type>
          <declname>_Handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/frame.h" line="42" column="1" bodyfile="modules/portable/frame.cpp" bodystart="131" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="frame_8h_1a5dc7784c46cb12b309a1da8dbe9b657f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void portable_coro_destroy</definition>
        <argsstring>(portable_coro_prefix *_Handle)</argsstring>
        <name>portable_coro_destroy</name>
        <param>
          <type>portable_coro_prefix *</type>
          <declname>_Handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/frame.h" line="43" column="1" bodyfile="modules/portable/frame.cpp" bodystart="139" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="frame_8h_1ae25b4cbe4319855dc809f51873b98e0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto portable_coro_from_promise</definition>
        <argsstring>(void *_PromAddr, ptrdiff_t _PromSize) -&gt; portable_coro_prefix *</argsstring>
        <name>portable_coro_from_promise</name>
        <param>
          <type>void *</type>
          <declname>_PromAddr</declname>
        </param>
        <param>
          <type>ptrdiff_t</type>
          <declname>_PromSize</declname>
        </param>
        <briefdescription>
<para>Get the frame prefix &apos;from_promise&apos;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/frame.h" line="45" column="1" bodyfile="modules/portable/frame.cpp" bodystart="171" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="frame_8h_1a4d79efa01220fdbe2748544d40292f2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* portable_coro_get_promise</definition>
        <argsstring>(portable_coro_prefix *_Handle, ptrdiff_t _PromSize)</argsstring>
        <name>portable_coro_get_promise</name>
        <param>
          <type>portable_coro_prefix *</type>
          <declname>_Handle</declname>
        </param>
        <param>
          <type>ptrdiff_t</type>
          <declname>_PromSize</declname>
        </param>
        <briefdescription>
<para>&apos;get_promise&apos; from the frame prefix </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/frame.h" line="47" column="1" bodyfile="modules/portable/frame.cpp" bodystart="150" bodyend="166"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Header to adjust the difference of coroutine frame between compilers. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>github.com/luncliff (<ulink url="mailto:luncliff@gmail.com">luncliff@gmail.com</ulink>) </para></simplesect>
<simplesect kind="see"><para>&lt;experimental/resumable&gt; from Microsoft VC++ (since 2017 Feb.) </para></simplesect>
<simplesect kind="see"><para>&lt;experimental/coroutine&gt; from LLVM libcxx (since 6.0) </para></simplesect>
<simplesect kind="see"><para><ulink url="https://github.com/iains/gcc-cxx-coroutines/tree/c%2B%2B-coroutines/gcc/testsuite/g%2B%2B.dg/coroutines">https://github.com/iains/gcc-cxx-coroutines/tree/c%2B%2B-coroutines/gcc/testsuite/g%2B%2B.dg/coroutines</ulink> </para></simplesect>
<simplesect kind="see"><para>17.12 Coroutines [support.coroutine]</para></simplesect>
<simplesect kind="copyright"><para>CC BY 4.0 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="13"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_COROUTINE_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="frame_8h_1a5ecce067256439ed3b5681e094ae749c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_COROUTINE_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="frame_8h_1a3096b918a14bbd178dd4899876bba567" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_EXPERIMENTAL_RESUMABLE_<sp/>//<sp/>suppress<sp/>&lt;experimental/resumable&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>_RESUMABLE_FUNCTIONS_SUPPORTED<sp/>//<sp/>this<sp/>will<sp/>be<sp/>enforced<sp/>by<sp/>MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__has_include(&lt;yvals_core.h&gt;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;yvals_core.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_STL_COMPILER_PREPROCESSOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;new&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>_STL_COMPILER_PREPROCESSOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;exception&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::current_exception</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>std::hash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__cpp_coroutines)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">portable_coro_prefix;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Alternative<sp/>of<sp/>`_coro_done`<sp/>of<sp/>msvc<sp/>for<sp/>this<sp/>library.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>renamed<sp/>to<sp/>avoid<sp/>redefinition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="frame_8h_1ac002a62257f981a6fc711d37427b78ab" kindref="member">portable_coro_done</ref>(portable_coro_prefix*<sp/>_Handle);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="frame_8h_1a9e5d5a4fb051d725d1b9dd68151ec9fd" kindref="member">portable_coro_resume</ref>(portable_coro_prefix*<sp/>_Handle);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="frame_8h_1a5dc7784c46cb12b309a1da8dbe9b657f" kindref="member">portable_coro_destroy</ref>(portable_coro_prefix*<sp/>_Handle);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="frame_8h_1ae25b4cbe4319855dc809f51873b98e0a" kindref="member">portable_coro_from_promise</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>_PromAddr,<sp/>ptrdiff_t<sp/>_PromSize)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/>portable_coro_prefix*;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="frame_8h_1a4d79efa01220fdbe2748544d40292f2c" kindref="member">portable_coro_get_promise</ref>(portable_coro_prefix*<sp/>_Handle,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrdiff_t<sp/>_PromSize);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="namespacestd" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>17.12.3,<sp/>coroutine<sp/>handle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_PromiseT<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="54" refid="structstd_1_1coroutine__handle" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstd_1_1coroutine__handle" kindref="compound">coroutine_handle</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STRUCT<sp/>TEMPLATE<sp/>coroutine_handle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="58" refid="structstd_1_1coroutine__handle_3_01void_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstd_1_1coroutine__handle" kindref="compound">coroutine_handle</ref>&lt;void&gt;<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>17.12.3.1,<sp/>construct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="structstd_1_1coroutine__handle_3_01void_01_4_1a00719061b82c9c30833bf1ca65580611" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/><ref refid="structstd_1_1coroutine__handle_3_01void_01_4_1a00719061b82c9c30833bf1ca65580611" kindref="member">coroutine_handle</ref>()<sp/>noexcept<sp/>:<sp/>_Ptr{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">}<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>17.12.3.1,<sp/>reset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="structstd_1_1coroutine__handle_3_01void_01_4_1a2fb02ba714309103598311e15a27d96f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/><ref refid="structstd_1_1coroutine__handle_3_01void_01_4_1a2fb02ba714309103598311e15a27d96f" kindref="member">coroutine_handle</ref>(std::nullptr_t)<sp/>noexcept<sp/>:<sp/>_Ptr{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">}<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65" refid="structstd_1_1coroutine__handle_3_01void_01_4_1a3407f60783152a1f0560c4b51911c5ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstd_1_1coroutine__handle" kindref="compound">coroutine_handle</ref>&amp;<sp/><ref refid="structstd_1_1coroutine__handle_3_01void_01_4_1a3407f60783152a1f0560c4b51911c5ea" kindref="member">operator=</ref>(nullptr_t)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>17.12.3.2,<sp/>export</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="structstd_1_1coroutine__handle_3_01void_01_4_1a53c28109d68a249b167b55f2e00fec0d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="structstd_1_1coroutine__handle_3_01void_01_4_1a53c28109d68a249b167b55f2e00fec0d" kindref="member">address</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_Ptr;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>17.12.3.2,<sp/>import</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="structstd_1_1coroutine__handle_3_01void_01_4_1a76f6a285c67fb921c7cdf9bdede2eeaf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*constexpr*/</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1coroutine__handle" kindref="compound">coroutine_handle</ref><sp/><ref refid="structstd_1_1coroutine__handle_3_01void_01_4_1a76f6a285c67fb921c7cdf9bdede2eeaf" kindref="member">from_address</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>_Addr)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structstd_1_1coroutine__handle" kindref="compound">coroutine_handle</ref><sp/>_Result{};</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Result._Ptr<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">portable_coro_prefix*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(_Addr);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_Result;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>17.12.3.3,<sp/>observers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="structstd_1_1coroutine__handle_3_01void_01_4_1ae59c49e9dccab018283cefff9c2e2cb3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_Ptr<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83" refid="structstd_1_1coroutine__handle_3_01void_01_4_1ad76f9dabbe85b529a389cb6ced893ce7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1coroutine__handle_3_01void_01_4_1ad76f9dabbe85b529a389cb6ced893ce7" kindref="member">done</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="frame_8h_1ac002a62257f981a6fc711d37427b78ab" kindref="member">portable_coro_done</ref>(_Ptr);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>17.12.3.4,<sp/>resumption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="structstd_1_1coroutine__handle_3_01void_01_4_1a2ca3a8939708812987408b7fac84c336" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1coroutine__handle_3_01void_01_4_1a2ca3a8939708812987408b7fac84c336" kindref="member">resume</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="frame_8h_1a9e5d5a4fb051d725d1b9dd68151ec9fd" kindref="member">portable_coro_resume</ref>(_Ptr);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90" refid="structstd_1_1coroutine__handle_3_01void_01_4_1af10de68c35d41c66f997023a1ca00567" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1coroutine__handle_3_01void_01_4_1af10de68c35d41c66f997023a1ca00567" kindref="member">operator()</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="frame_8h_1a9e5d5a4fb051d725d1b9dd68151ec9fd" kindref="member">portable_coro_resume</ref>(_Ptr);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93" refid="structstd_1_1coroutine__handle_3_01void_01_4_1a2867ef5f88bb895076bdad54049cc8df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1coroutine__handle_3_01void_01_4_1a2867ef5f88bb895076bdad54049cc8df" kindref="member">destroy</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="frame_8h_1a5dc7784c46cb12b309a1da8dbe9b657f" kindref="member">portable_coro_destroy</ref>(_Ptr);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>`private`<sp/>in<sp/>the<sp/>standard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="structstd_1_1coroutine__handle_3_01void_01_4_1a2b0a0c0e4aa456343c91c330cffbac98" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>portable_coro_prefix*<sp/><ref refid="structstd_1_1coroutine__handle_3_01void_01_4_1a2b0a0c0e4aa456343c91c330cffbac98" kindref="member">_Ptr</ref>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">};</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_PromiseT&gt;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstd_1_1coroutine__handle" kindref="compound">coroutine_handle</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1coroutine__handle" kindref="compound">coroutine_handle</ref>&lt;void&gt;<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>17.12.3.1,<sp/>construct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1coroutine__handle" kindref="compound">coroutine_handle&lt;void&gt;::coroutine_handle</ref>;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="structstd_1_1coroutine__handle_1ae5c6fd5a601ffde34d8e5d9130851a01" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1coroutine__handle" kindref="compound">coroutine_handle</ref><sp/><ref refid="structstd_1_1coroutine__handle_1ae5c6fd5a601ffde34d8e5d9130851a01" kindref="member">from_promise</ref>(_PromiseT&amp;<sp/>_Prom)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>_Addr<sp/>=<sp/><ref refid="frame_8h_1ae25b4cbe4319855dc809f51873b98e0a" kindref="member">portable_coro_from_promise</ref>(&amp;_Prom,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(_PromiseT));</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1coroutine__handle_1ae744465e0cadc25082d5b36f8e60bea3" kindref="member">coroutine_handle::from_address</ref>(_Addr);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>17.12.3.1,<sp/>reset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="structstd_1_1coroutine__handle_1a5b18d02f810729a20b6916a31b4dfffb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstd_1_1coroutine__handle" kindref="compound">coroutine_handle</ref>&amp;<sp/><ref refid="structstd_1_1coroutine__handle_1a5b18d02f810729a20b6916a31b4dfffb" kindref="member">operator=</ref>(nullptr_t)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;_Ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>17.12.3.2,<sp/>export/import</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="structstd_1_1coroutine__handle_1ae744465e0cadc25082d5b36f8e60bea3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*constexpr*/</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1coroutine__handle" kindref="compound">coroutine_handle</ref><sp/><ref refid="structstd_1_1coroutine__handle_1ae744465e0cadc25082d5b36f8e60bea3" kindref="member">from_address</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>_Addr)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structstd_1_1coroutine__handle" kindref="compound">coroutine_handle</ref><sp/>_Result{};</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Result._Ptr<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">portable_coro_prefix*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(_Addr);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_Result;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>17.12.3.5,<sp/>promise<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="structstd_1_1coroutine__handle_1a36141e7f3007812cad591c77d985a19a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>_PromiseT&amp;<sp/><ref refid="structstd_1_1coroutine__handle_1a36141e7f3007812cad591c77d985a19a" kindref="member">promise</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>_Prefix<sp/>=</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">portable_coro_prefix*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(this-&gt;address());</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>_Addr<sp/>=<sp/><ref refid="frame_8h_1a4d79efa01220fdbe2748544d40292f2c" kindref="member">portable_coro_get_promise</ref>(_Prefix,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(_PromiseT));</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_PromiseT*<sp/>_Prom<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">_PromiseT*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(_Addr);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*_Prom;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal">};</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>17.12.3.6,<sp/>comparison<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="namespacestd_1a6afe77761cc2bb4b999d0c5d420eaa91" refkind="member"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacestd_1a6afe77761cc2bb4b999d0c5d420eaa91" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1coroutine__handle_3_01void_01_4" kindref="compound">coroutine_handle&lt;void&gt;</ref><sp/>_Left,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1coroutine__handle_3_01void_01_4" kindref="compound">coroutine_handle&lt;void&gt;</ref><sp/>_Right)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_Left.address()<sp/>==<sp/>_Right.address();</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="namespacestd_1ac124cc9360c133441e329a5a33c1280d" refkind="member"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacestd_1ac124cc9360c133441e329a5a33c1280d" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1coroutine__handle_3_01void_01_4" kindref="compound">coroutine_handle&lt;void&gt;</ref><sp/>_Left,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1coroutine__handle_3_01void_01_4" kindref="compound">coroutine_handle&lt;void&gt;</ref><sp/>_Right)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(_Left<sp/>==<sp/>_Right);</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146" refid="namespacestd_1a2e1bafefd3a1a93c5df60be5bb463d90" refkind="member"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;(const<sp/>coroutine_handle&lt;void&gt;<sp/>_Left,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1coroutine__handle_3_01void_01_4" kindref="compound">coroutine_handle&lt;void&gt;</ref><sp/>_Right)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_Left.<ref refid="structstd_1_1coroutine__handle_3_01void_01_4_1a53c28109d68a249b167b55f2e00fec0d" kindref="member">address</ref>()<sp/>&lt;<sp/>_Right.address();</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150" refid="namespacestd_1a06a1162629552eb6bdcb2a3ed725b3eb" refkind="member"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacestd_1a06a1162629552eb6bdcb2a3ed725b3eb" kindref="member">operator&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1coroutine__handle_3_01void_01_4" kindref="compound">coroutine_handle&lt;void&gt;</ref><sp/>_Left,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1coroutine__handle_3_01void_01_4" kindref="compound">coroutine_handle&lt;void&gt;</ref><sp/>_Right)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_Right<sp/>&lt;<sp/>_Left;</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154" refid="namespacestd_1ab5872289d09b6a964e8008c5ccfca465" refkind="member"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;=(const<sp/>coroutine_handle&lt;void&gt;<sp/>_Left,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1coroutine__handle_3_01void_01_4" kindref="compound">coroutine_handle&lt;void&gt;</ref><sp/>_Right)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(_Left<sp/>&gt;<sp/>_Right);</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158" refid="namespacestd_1a0deb9c2f722ef383052395fc5a99e63e" refkind="member"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacestd_1a0deb9c2f722ef383052395fc5a99e63e" kindref="member">operator&gt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1coroutine__handle_3_01void_01_4" kindref="compound">coroutine_handle&lt;void&gt;</ref><sp/>_Left,</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1coroutine__handle_3_01void_01_4" kindref="compound">coroutine_handle&lt;void&gt;</ref><sp/>_Right)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(_Left<sp/>&lt;<sp/>_Right);</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">//<sp/>17.12.4,<sp/>no-op<sp/>coroutines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164" refid="structstd_1_1noop__coroutine__promise" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstd_1_1noop__coroutine__promise" kindref="compound">noop_coroutine_promise</ref><sp/>{};</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STRUCT<sp/>noop_coroutine_handle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="namespacestd_1a65bade8aeae7a9efa8101240c161d109" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1coroutine__handle_3_01noop__coroutine__promise_01_4" kindref="compound">noop_coroutine_handle</ref><sp/>=<sp/><ref refid="structstd_1_1coroutine__handle_3_01noop__coroutine__promise_01_4" kindref="compound">coroutine_handle&lt;noop_coroutine_promise&gt;</ref>;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//<sp/>17.12.4.3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><ref refid="structstd_1_1coroutine__handle_3_01noop__coroutine__promise_01_4" kindref="compound">noop_coroutine_handle</ref><sp/><ref refid="namespacestd_1aea74685396dbd4152e0f297c53721915" kindref="member">noop_coroutine</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STRUCT<sp/>coroutine_handle&lt;noop_coroutine_promise&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal">template<sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="174" refid="structstd_1_1coroutine__handle_3_01noop__coroutine__promise_01_4" refkind="compound"><highlight class="normal">struct<sp/><ref refid="structstd_1_1coroutine__handle" kindref="compound">coroutine_handle</ref>&lt;<ref refid="structstd_1_1noop__coroutine__promise" kindref="compound">noop_coroutine_promise</ref>&gt;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>public<sp/><ref refid="structstd_1_1coroutine__handle" kindref="compound">coroutine_handle</ref>&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>17.12.4.2.1,<sp/>observers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="structstd_1_1coroutine__handle_3_01noop__coroutine__promise_01_4_1af8fba5c3efd872a89e95d28a11310583" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180" refid="structstd_1_1coroutine__handle_3_01noop__coroutine__promise_01_4_1a6fb323e8614db22e993a3e050a04d77b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1coroutine__handle_3_01noop__coroutine__promise_01_4_1a6fb323e8614db22e993a3e050a04d77b" kindref="member">done</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>17.12.4.2.2,<sp/>resumption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="structstd_1_1coroutine__handle_3_01noop__coroutine__promise_01_4_1a9957547cfe9e5ff647069c5ba5a2bba2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1coroutine__handle_3_01noop__coroutine__promise_01_4_1a9957547cfe9e5ff647069c5ba5a2bba2" kindref="member">operator()</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186" refid="structstd_1_1coroutine__handle_3_01noop__coroutine__promise_01_4_1af63cb9835b297d0650a426063968cfd5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1coroutine__handle_3_01noop__coroutine__promise_01_4_1af63cb9835b297d0650a426063968cfd5" kindref="member">resume</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188" refid="structstd_1_1coroutine__handle_3_01noop__coroutine__promise_01_4_1afb8ef84df3649323ccccb1673ef5ff88" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1coroutine__handle_3_01noop__coroutine__promise_01_4_1afb8ef84df3649323ccccb1673ef5ff88" kindref="member">destroy</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__has_builtin(__builtin_coro_noop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstd_1_1noop__coroutine__promise" kindref="compound">noop_coroutine_promise</ref>&amp;<sp/><ref refid="structstd_1_1coroutine__handle_1a36141e7f3007812cad591c77d985a19a" kindref="member">promise</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>_Prom<sp/>=</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__builtin_coro_promise(__builtin_coro_noop(),<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">alignof</highlight><highlight class="normal">(<ref refid="structstd_1_1noop__coroutine__promise" kindref="compound">noop_coroutine_promise</ref>),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(<ref refid="structstd_1_1noop__coroutine__promise" kindref="compound">noop_coroutine_promise</ref>*)(_Prom);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstd_1_1coroutine__handle" kindref="compound">coroutine_handle</ref>()<sp/>noexcept</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structstd_1_1coroutine__handle_3_01void_01_4" kindref="compound">coroutine_handle&lt;void&gt;</ref>{<ref refid="structstd_1_1coroutine__handle_1ae744465e0cadc25082d5b36f8e60bea3" kindref="member">from_address</ref>(__builtin_coro_noop())}<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;requires<sp/>higher<sp/>clang<sp/>version<sp/>to<sp/>use<sp/>__builtin_coro_noop&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>17.12.4.2.4,<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>C3615:<sp/>cannot<sp/>result<sp/>in<sp/>a<sp/>constant<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>address()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structstd_1_1noop__coroutine__promise" kindref="compound">noop_coroutine_promise</ref>*)(UINTPTR_MAX<sp/>-<sp/>0x170704);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>17.12.4.2.3,<sp/>promise<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstd_1_1noop__coroutine__promise" kindref="compound">noop_coroutine_promise</ref>&amp;<sp/><ref refid="structstd_1_1coroutine__handle_1a36141e7f3007812cad591c77d985a19a" kindref="member">promise</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(<ref refid="structstd_1_1noop__coroutine__promise" kindref="compound">noop_coroutine_promise</ref>*)(this-&gt;address());</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstd_1_1coroutine__handle" kindref="compound">coroutine_handle</ref>()<sp/>noexcept</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structstd_1_1coroutine__handle_3_01void_01_4" kindref="compound">coroutine_handle&lt;void&gt;</ref>{<ref refid="structstd_1_1coroutine__handle_1ae744465e0cadc25082d5b36f8e60bea3" kindref="member">from_address</ref>(&amp;this-&gt;<ref refid="structstd_1_1coroutine__handle_1a36141e7f3007812cad591c77d985a19a" kindref="member">promise</ref>())}<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>noop_coroutine_handle&apos;s<sp/>ptr<sp/>is<sp/>always<sp/>a<sp/>non-null<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1coroutine__handle_3_01noop__coroutine__promise_01_4" kindref="compound">noop_coroutine_handle</ref><sp/><ref refid="namespacestd_1aea74685396dbd4152e0f297c53721915" kindref="member">noop_coroutine</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="231"><highlight class="normal">};</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233" refid="namespacestd_1aea74685396dbd4152e0f297c53721915" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1coroutine__handle_3_01noop__coroutine__promise_01_4" kindref="compound">noop_coroutine_handle</ref><sp/><ref refid="namespacestd_1aea74685396dbd4152e0f297c53721915" kindref="member">noop_coroutine</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">//<sp/>17.12.5,<sp/>trivial<sp/>awaitables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STRUCT<sp/>suspend_never</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240" refid="classstd_1_1suspend__never" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classstd_1_1suspend__never" kindref="compound">suspend_never</ref><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="242" refid="classstd_1_1suspend__never_1a5580bc2b80198f89509ff360940f7717" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1suspend__never_1a5580bc2b80198f89509ff360940f7717" kindref="member">await_ready</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245" refid="classstd_1_1suspend__never_1a53576ddeaa9a9a449de888ff128ff5b9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1suspend__never_1a53576ddeaa9a9a449de888ff128ff5b9" kindref="member">await_resume</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247" refid="classstd_1_1suspend__never_1abecb08cd6432018de4d3d8101ab684bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1suspend__never_1abecb08cd6432018de4d3d8101ab684bf" kindref="member">await_suspend</ref>(<ref refid="structstd_1_1coroutine__handle_3_01void_01_4" kindref="compound">coroutine_handle&lt;void&gt;</ref>)<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal">};</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STRUCT<sp/>suspend_always</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252" refid="classstd_1_1suspend__always" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classstd_1_1suspend__always" kindref="compound">suspend_always</ref><sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="254" refid="classstd_1_1suspend__always_1aa54aab5520e3556f0890b94583bd6e9c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1suspend__always_1aa54aab5520e3556f0890b94583bd6e9c" kindref="member">await_ready</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257" refid="classstd_1_1suspend__always_1a88a2c10a7c4b29e403779a0d54c5ba6c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1suspend__always_1a88a2c10a7c4b29e403779a0d54c5ba6c" kindref="member">await_resume</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259" refid="classstd_1_1suspend__always_1a34da95c5a98c9e4b2f929e397f9704c6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1suspend__always_1a34da95c5a98c9e4b2f929e397f9704c6" kindref="member">await_suspend</ref>(<ref refid="structstd_1_1coroutine__handle_3_01void_01_4" kindref="compound">coroutine_handle&lt;void&gt;</ref>)<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal">};</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">//<sp/>17.12.2,<sp/>coroutine<sp/>traits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>_Ret,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="266" refid="structstd_1_1coro__traits__sfinae" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstd_1_1coro__traits__sfinae" kindref="compound">coro_traits_sfinae</ref><sp/>{};</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>_Ret&gt;</highlight></codeline>
<codeline lineno="269" refid="structstd_1_1coro__traits__sfinae_3_01__Ret_00_01void__t_3_01typename_01__Ret_1_1promise__type_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstd_1_1coro__traits__sfinae" kindref="compound">coro_traits_sfinae</ref>&lt;_Ret,<sp/>void_t&lt;typename<sp/>_Ret::<ref refid="structstd_1_1coro__traits__sfinae_3_01__Ret_00_01void__t_3_01typename_01__Ret_1_1promise__type_01_4_01_4_1aedd4e5217b19e80ecfdcce12d962fe9a" kindref="member">promise_type</ref>&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="270" refid="structstd_1_1coro__traits__sfinae_3_01__Ret_00_01void__t_3_01typename_01__Ret_1_1promise__type_01_4_01_4_1aedd4e5217b19e80ecfdcce12d962fe9a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1coro__traits__sfinae_3_01__Ret_00_01void__t_3_01typename_01__Ret_1_1promise__type_01_4_01_4_1aedd4e5217b19e80ecfdcce12d962fe9a" kindref="member">promise_type</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_Ret::promise_type;</highlight></codeline>
<codeline lineno="271"><highlight class="normal">};</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment">//<sp/>there<sp/>is<sp/>no<sp/>way<sp/>but<sp/>to<sp/>define<sp/>in<sp/>`std::experimental`<sp/>since<sp/>compilers<sp/>are<sp/>checking<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274" refid="namespacestd_1_1experimental" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">experimental<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STRUCT<sp/>TEMPLATE<sp/>coroutine_traits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_Ret,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>_Ts&gt;</highlight></codeline>
<codeline lineno="278" refid="structstd_1_1experimental_1_1coroutine__traits" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstd_1_1experimental_1_1coroutine__traits" kindref="compound">coroutine_traits</ref><sp/>:<sp/><ref refid="structstd_1_1coro__traits__sfinae" kindref="compound">coro_traits_sfinae</ref>&lt;_Ret&gt;<sp/>{};</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang:<sp/>std::experimental::coroutine_handle<sp/>must<sp/>be<sp/>a<sp/>class<sp/>template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P&gt;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstd_1_1coroutine__handle" kindref="compound">coroutine_handle</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1coroutine__handle" kindref="compound">std::coroutine_handle</ref>&lt;P&gt;<sp/>{};</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="comment">//<sp/>msvc:<sp/>compatibility<sp/>with<sp/>existing<sp/>`experimental::coroutine_handle`<sp/>identifiers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1coroutine__handle" kindref="compound">std::coroutine_handle</ref>;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="comment">//<sp/>_Resumable_helper_traits<sp/>class<sp/>isolates<sp/>front-end<sp/>from<sp/>public<sp/>surface<sp/>naming<sp/>changes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>original<sp/>code<sp/>is<sp/>in<sp/>&lt;experimental/resumable&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_Ret,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>_Ts&gt;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_Resumable_helper_traits<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_Traits<sp/>=<sp/><ref refid="structstd_1_1experimental_1_1coroutine__traits" kindref="compound">coroutine_traits</ref>&lt;_Ret,<sp/>_Ts...&gt;;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_PromiseT<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_Traits::promise_type;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_Handle_type<sp/>=<sp/><ref refid="structstd_1_1coroutine__handle" kindref="compound">coroutine_handle&lt;_PromiseT&gt;</ref>;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>_PromiseT*<sp/>_Promise_from_frame(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>_Addr)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>prom<sp/>=<sp/>_Handle_type::from_address(_Addr).<ref refid="structstd_1_1coroutine__handle_1a36141e7f3007812cad591c77d985a19a" kindref="member">promise</ref>();</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;prom;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>_Handle_type<sp/>_Handle_from_frame(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>_Addr)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_Handle_type::from_promise(*_Promise_from_frame(_Addr));</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_Set_exception(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>_Addr)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Promise_from_frame(_Addr)-&gt;set_exception(std::current_exception());</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_ConstructPromise(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>_Addr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>_Resume_addr,</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_HeapElision)<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(_Addr)<sp/>=<sp/>_Resume_addr;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">uint32_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">uintptr_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(_Addr)<sp/>+</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*))<sp/>=</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2u<sp/>+<sp/>(_HeapElision<sp/>?<sp/>0u<sp/>:<sp/>0x10000u);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_Prom<sp/>=<sp/>_Promise_from_frame(_Addr);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::new<sp/>(static_cast&lt;void*&gt;(_Prom))<sp/>_PromiseT();</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_DestructPromise(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>_Addr)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Promise_from_frame(_Addr)-&gt;~_PromiseT();</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal">};</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>experimental</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STRUCT<sp/>TEMPLATE<sp/>coroutine_traits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Ret,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Param&gt;</highlight></codeline>
<codeline lineno="333" refid="namespacestd_1a6b868b9d1542641a1fc432863d8c91d2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1experimental_1_1coroutine__traits" kindref="compound">coroutine_traits</ref><sp/>=<sp/><ref refid="structstd_1_1experimental_1_1coroutine__traits" kindref="compound">std::experimental::coroutine_traits</ref>&lt;Ret,<sp/>Param...&gt;;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment">//<sp/>17.12.3.7,<sp/>hash<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P&gt;</highlight></codeline>
<codeline lineno="337" refid="structstd_1_1hash_3_01coroutine__handle_3_01P_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">hash&lt;<ref refid="structstd_1_1coroutine__handle" kindref="compound">coroutine_handle</ref>&lt;P&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>deprecated<sp/>in<sp/>C++17</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339" refid="structstd_1_1hash_3_01coroutine__handle_3_01P_01_4_01_4_1a8d8621f44cb43d3adb4a65bce92a2d90" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1coroutine__handle" kindref="compound">argument_type</ref><sp/>=<sp/><ref refid="structstd_1_1coroutine__handle" kindref="compound">coroutine_handle&lt;P&gt;</ref>;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>deprecated<sp/>in<sp/>C++17</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341" refid="structstd_1_1hash_3_01coroutine__handle_3_01P_01_4_01_4_1af3ce9a823d91241074300d1185cd722a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1hash_3_01coroutine__handle_3_01P_01_4_01_4_1af3ce9a823d91241074300d1185cd722a" kindref="member">result_type</ref><sp/>=<sp/>size_t;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structstd_1_1hash_3_01coroutine__handle_3_01P_01_4_01_4_1af3ce9a823d91241074300d1185cd722a" kindref="member">result_type</ref></highlight></codeline>
<codeline lineno="344" refid="structstd_1_1hash_3_01coroutine__handle_3_01P_01_4_01_4_1ac16cee347fbc64caaf634673c074832a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structstd_1_1hash_3_01coroutine__handle_3_01P_01_4_01_4_1ac16cee347fbc64caaf634673c074832a" kindref="member">operator()</ref>(<ref refid="structstd_1_1coroutine__handle" kindref="compound">argument_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_Handle)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hash&lt;void*&gt;()(_Handle.address());</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal">};</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>std</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>_COROUTINE_</highlight></codeline>
    </programlisting>
    <location file="interface/coroutine/frame.h"/>
  </compounddef>
</doxygen>
