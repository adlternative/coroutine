<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classcoro_1_1enumerable" kind="class" language="C++" prot="public">
    <compoundname>coro::enumerable</compoundname>
    <includes refid="yield_8hpp" local="no">yield.hpp</includes>
    <innerclass refid="classcoro_1_1enumerable_1_1iterator" prot="public">coro::enumerable::iterator</innerclass>
    <innerclass refid="classcoro_1_1enumerable_1_1promise__type" prot="public">coro::enumerable::promise_type</innerclass>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classcoro_1_1enumerable_1a30cfb124d4d187b8d7d857932f269785" prot="public" static="no">
        <type>T</type>
        <definition>using coro::enumerable&lt; T &gt;::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/yield.hpp" line="28" column="1" bodyfile="interface/coroutine/yield.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classcoro_1_1enumerable_1ac45ca85d84312664b0d976c637e8a34a" prot="public" static="no">
        <type><ref refid="classcoro_1_1enumerable_1a30cfb124d4d187b8d7d857932f269785" kindref="member">value_type</ref> &amp;</type>
        <definition>using coro::enumerable&lt; T &gt;::reference =  value_type&amp;</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/yield.hpp" line="29" column="1" bodyfile="interface/coroutine/yield.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classcoro_1_1enumerable_1ad8ece9f0764780703e11f080bdbae36b" prot="public" static="no">
        <type><ref refid="classcoro_1_1enumerable_1a30cfb124d4d187b8d7d857932f269785" kindref="member">value_type</ref> *</type>
        <definition>using coro::enumerable&lt; T &gt;::pointer =  value_type*</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/yield.hpp" line="30" column="1" bodyfile="interface/coroutine/yield.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classcoro_1_1enumerable_1a3b3e93b586710a54d49004bb84256c64" prot="private" static="no" mutable="no">
        <type><ref refid="structstd_1_1coroutine__handle" kindref="compound">coroutine_handle</ref>&lt; <ref refid="classcoro_1_1enumerable_1_1promise__type" kindref="compound">promise_type</ref> &gt;</type>
        <definition>coroutine_handle&lt;promise_type&gt; coro::enumerable&lt; T &gt;::coro</definition>
        <argsstring></argsstring>
        <name>coro</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/yield.hpp" line="33" column="1" bodyfile="interface/coroutine/yield.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classcoro_1_1enumerable_1a14bd9af0903168ccbe29a8b99ea6c4fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>coro::enumerable&lt; T &gt;::enumerable</definition>
        <argsstring>(const enumerable &amp;)=delete</argsstring>
        <name>enumerable</name>
        <param>
          <type>const <ref refid="classcoro_1_1enumerable" kindref="compound">enumerable</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/yield.hpp" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classcoro_1_1enumerable_1a4a385bc06b572c9476ec7b91e79db8b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcoro_1_1enumerable" kindref="compound">enumerable</ref> &amp;</type>
        <definition>enumerable&amp; coro::enumerable&lt; T &gt;::operator=</definition>
        <argsstring>(const enumerable &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classcoro_1_1enumerable" kindref="compound">enumerable</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/yield.hpp" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classcoro_1_1enumerable_1a6a0ff35826bbaced326701e6d4aed045" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>coro::enumerable&lt; T &gt;::enumerable</definition>
        <argsstring>(enumerable &amp;&amp;rhs) noexcept</argsstring>
        <name>enumerable</name>
        <param>
          <type><ref refid="classcoro_1_1enumerable" kindref="compound">enumerable</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/yield.hpp" line="38" column="1" bodyfile="interface/coroutine/yield.hpp" bodystart="38" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classcoro_1_1enumerable_1a47b8cd22b91323ee98e94b9c5d11dfaf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcoro_1_1enumerable" kindref="compound">enumerable</ref> &amp;</type>
        <definition>enumerable&amp; coro::enumerable&lt; T &gt;::operator=</definition>
        <argsstring>(enumerable &amp;&amp;rhs) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classcoro_1_1enumerable" kindref="compound">enumerable</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/yield.hpp" line="41" column="1" bodyfile="interface/coroutine/yield.hpp" bodystart="41" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classcoro_1_1enumerable_1a6d9e3781bbf372cc2c4482d185b7dc60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>coro::enumerable&lt; T &gt;::enumerable</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>enumerable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/yield.hpp" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classcoro_1_1enumerable_1a16f727be9a88344770617323775df0d6" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>coro::enumerable&lt; T &gt;::enumerable</definition>
        <argsstring>(coroutine_handle&lt; promise_type &gt; rh) noexcept</argsstring>
        <name>enumerable</name>
        <param>
          <type><ref refid="structstd_1_1coroutine__handle" kindref="compound">coroutine_handle</ref>&lt; <ref refid="classcoro_1_1enumerable_1_1promise__type" kindref="compound">promise_type</ref> &gt;</type>
          <declname>rh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/yield.hpp" line="46" column="1" bodyfile="interface/coroutine/yield.hpp" bodystart="46" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classcoro_1_1enumerable_1a9495bee88e88b78fa1ccbbcf85ca690f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>coro::enumerable&lt; T &gt;::~enumerable</definition>
        <argsstring>() noexcept</argsstring>
        <name>~enumerable</name>
        <briefdescription>
<para>The type will destroy the frame in destructor So promise/iterator are free from those ownership control. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/yield.hpp" line="52" column="1" bodyfile="interface/coroutine/yield.hpp" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classcoro_1_1enumerable_1a2f71945bdd5fd04560a5ea038bbebc6e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcoro_1_1enumerable_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator coro::enumerable&lt; T &gt;::begin</definition>
        <argsstring>() noexcept(false)</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/yield.hpp" line="58" column="1" bodyfile="interface/coroutine/yield.hpp" bodystart="58" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classcoro_1_1enumerable_1a58e555626deca84947207278b8e58821" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcoro_1_1enumerable_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator coro::enumerable&lt; T &gt;::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/coroutine/yield.hpp" line="67" column="1" bodyfile="interface/coroutine/yield.hpp" bodystart="67" bodyend="69"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>C++ Coroutines Generator. </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the element </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>N4402 </para></simplesect>
<simplesect kind="see"><para>&lt;experimental/generator&gt; from the VC++ </para></simplesect>
</para>    </detaileddescription>
    <location file="interface/coroutine/yield.hpp" line="23" column="1" bodyfile="interface/coroutine/yield.hpp" bodystart="23" bodyend="153"/>
    <listofallmembers>
      <member refid="classcoro_1_1enumerable_1a2f71945bdd5fd04560a5ea038bbebc6e" prot="public" virt="non-virtual"><scope>coro::enumerable</scope><name>begin</name></member>
      <member refid="classcoro_1_1enumerable_1a3b3e93b586710a54d49004bb84256c64" prot="private" virt="non-virtual"><scope>coro::enumerable</scope><name>coro</name></member>
      <member refid="classcoro_1_1enumerable_1a58e555626deca84947207278b8e58821" prot="public" virt="non-virtual"><scope>coro::enumerable</scope><name>end</name></member>
      <member refid="classcoro_1_1enumerable_1a14bd9af0903168ccbe29a8b99ea6c4fb" prot="public" virt="non-virtual"><scope>coro::enumerable</scope><name>enumerable</name></member>
      <member refid="classcoro_1_1enumerable_1a6a0ff35826bbaced326701e6d4aed045" prot="public" virt="non-virtual"><scope>coro::enumerable</scope><name>enumerable</name></member>
      <member refid="classcoro_1_1enumerable_1a6d9e3781bbf372cc2c4482d185b7dc60" prot="public" virt="non-virtual"><scope>coro::enumerable</scope><name>enumerable</name></member>
      <member refid="classcoro_1_1enumerable_1a16f727be9a88344770617323775df0d6" prot="public" virt="non-virtual"><scope>coro::enumerable</scope><name>enumerable</name></member>
      <member refid="classcoro_1_1enumerable_1a4a385bc06b572c9476ec7b91e79db8b6" prot="public" virt="non-virtual"><scope>coro::enumerable</scope><name>operator=</name></member>
      <member refid="classcoro_1_1enumerable_1a47b8cd22b91323ee98e94b9c5d11dfaf" prot="public" virt="non-virtual"><scope>coro::enumerable</scope><name>operator=</name></member>
      <member refid="classcoro_1_1enumerable_1ad8ece9f0764780703e11f080bdbae36b" prot="public" virt="non-virtual"><scope>coro::enumerable</scope><name>pointer</name></member>
      <member refid="classcoro_1_1enumerable_1ac45ca85d84312664b0d976c637e8a34a" prot="public" virt="non-virtual"><scope>coro::enumerable</scope><name>reference</name></member>
      <member refid="classcoro_1_1enumerable_1a30cfb124d4d187b8d7d857932f269785" prot="public" virt="non-virtual"><scope>coro::enumerable</scope><name>value_type</name></member>
      <member refid="classcoro_1_1enumerable_1a9495bee88e88b78fa1ccbbcf85ca690f" prot="public" virt="non-virtual"><scope>coro::enumerable</scope><name>~enumerable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
